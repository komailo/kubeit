name: ci
on:
  pull_request:
  push:
    branches:
      - main

permissions:
  # Required: allow read access to the content for analysis.
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read
  checks: write

jobs:
  validate-go-mod-tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version-file: go.mod

      - name: Verify go.mod and go.sum are tidy
        run: |
          if ! go mod tidy -diff; then
            echo "::error:: go.mod or go.sum is not tidy. Please run 'go mod tidy' and commit the changes."
            exit 1
          fi

  go-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # Docker is setup for integration tests
      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Set up Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        with:
          go-version-file: go.mod

      - name: Run Tests and Generate Coverage Report
        run: |
          go test -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          files: coverage.out

      - name: Ensure Coverage Does Not Drop
        run: |
          go install github.com/ory/go-acc@latest
          go tool cover -func=coverage.out | grep total | awk '{print $3}' > coverage.txt
          current_coverage=$(cat coverage.txt)
          echo "Current coverage: $current_coverage"
          if (( $(echo "$current_coverage < $MINIMUM_COVERAGE" | bc -l) )); then
            echo "::error:: Test coverage has dropped below the minimum threshold."
            exit 1
          fi
        env:
          MINIMUM_COVERAGE: 6.7 # Set your minimum coverage threshold here
